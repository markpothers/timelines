cont
connection_check.length
cont
potential
first_persons_connections
cont
connection_check.length
cont
my_n_degree
cont
exit
my_n_degree
cont
my_n_degree
cont
first_persons_connections
cont
my_n_degree
exit
first_persons_connections
cont
their_n_degree
my_n_degree
connection_check.length
connection_result.length
cont
first_persons_connections
potential
exit
first_persons_connections
potential
cont
connection_check.length
connection_check
cont
potential
exit
first_persons_connections
[1,2] & [4,3]
[1,2] & [2,3]
potential
cont
connection_check
cont
potential !=[]
first_persons_connections & second_persons_connections
potential
cont
connection_check[0]
cont
exit
cont
potential
cont
connection_check.length
cont
potential
cont
connection_check.length
connection_check
cont
exit
next_degree(first_persons_connections)
second_persons_connections
first_persons_connections
first_persons_connections & second_persons_connections
potential
cont
connection_check[1] & connection_check[2]
cont
first_persons_connections & second_persons_connections
second_persons_connections
first_persons_connections
potential
cont
exit
exti
connection_check[1] & connection_check[2]
connection_check[2]
connection_check[1]
connection_check[0]
cont
connection_check[1] & connection_check[2]
connection_check[2]
connection_check[1]
connection_check[0]
connection_check
cont
connection_check
cont
connection_check
their_first_degree
connection_check
cont
my_second_degree = next_degree(my_first_degree)
their_first_degree
cont
connections.map{|c| c[0]}
connections
exit
my_first_degree
next_degree(my_first_degree.flatten)
my_first_degree.flatten
my_first_degree
my_second_degree = next_degree(my_first_degree)
their_first_degree
my_second_degree
cont
their_first_degree
my_first_degree
cont
coincident_locations.first
coincident_locations
coicident_locations
exit
days
cont
@user
cont
<<<<<<< HEAD
@results
exit
@results
cont
their_location.person
cont
their_location.person
cont
their_location.person
cont
their_location.person
cont
co_locations[4]
co_locations[3]
co_locations[2]
co_locations[1]
co_locations[0]
co_locations
self
co_locations[0][0].name
co_locations[0]
co_locations
exit
@results[3]
@results[2]
@results[1]
@results[0]
@results[1]
@results
exit
@people
people
@positions
exit
@events
@positions
@employers
@people
@cities
exit
@results.each{ |result| puts result.ids}
@results.each{ |result| puts result.id}
@results.each{ |result| result.ids}
@results.each{ |result| result.id}
@results.each{ |result| result.name ? result.name : result.title}
@results.each do |result|
@results.each.do |result|
@results
cont
self.co_located(self.events_as_visitor, Event)
self.co_located(self.sorted_positions, Event)
self.co_located(self.events_as_visitor, Position)
self.co_located(self.sorted_positions, Position)
cont
self.co_located(self.events_as_visitor, Event)
self.co_located(self.sorted_positions, Event)
self.co_located(self.events_as_visitor, Position)
self.co_located(self.sorted_positions, Position).length
self.co_located(self.sorted_positions, Position)
cont
self.co_located(self.events_as_visitor, Event)
self.co_located(self.sorted_positions, Event)
self.co_located(self.events_as_visitor, Position)
self.co_located(self.sorted_positions, Position)
cont
self.co_located(self.events_as_visitor, Event)
self.co_located(self.sorted_positions, Event)
cont
self.co_located(self.sorted_positions, Event)
self.co_located(self.events_as_visitor, Position)
self.co_located(self.sorted_positions, Position)
cont
self.co_located(self.sorted_positions, Event)
self.co_located(self.events_as_visitor, Position)
self.co_located(self.sorted_positions, Position)
cont
self.co_located(self.sorted_positions, Event)
self.co_located(self.events_as_visitor, Position)
self.co_located(self.sorted_positions, Position)
cont!
cont
co_locations = co_locations.concat self.co_located(self.sorted_positions, Event)
self.co_located(self.events_as_visitor, Position)
self.co_located(self.sorted_positions, Position)
cont
self.co_located(self.events_as_visitor, Position)
self.co_located(self.sorted_positions, Position)
cont
their_class
cont
self.co_located(self.sorted_positions, Position)
cont
self.co_located(self.sorted_positions, Position, "city_id = #{location.destination.id}")
cont
self.co_located(self.sorted_positions, Position, "city_id = #{location.destination.id}")
cont
destination
destinations
"destination"
self.co_located(self.sorted_positions, Position, "destination")
cont
self.co_located(self.sorted_positions, Position, "destination")
co_locations.concat self.co_located(self.sorted_positions, Position, "destination")
self.co_located(self.sorted_positions, Position, "destination")
cont
ont
self.sorted_positions
self.co_located(self.sorted_positions, "Position", "destination")
self.co_located(self.sorted_positions, Position, "destination")
cont
self.co_located(self.sorted_positions, Position, "destination")
self.co_located(self.sorted_positions, Position, destination)
(self.sorted_positions, Position, destination)
cont
self.co_located_e_p
self.co_located_p_p
cont
their_position
cont
self.co_located_e_p
self.co_located_p_p
cont
my_position
cont
self.events_as_visitor
self.events_as_visitors
self.events
cont
self.co_located
self.colocated
cont
find_overlap(my_position, their_position)
cont
find_overlap(my_position, their_position)
cont
find_overlap(my_position, my_position)
